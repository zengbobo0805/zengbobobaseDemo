第1部分 基础篇
第1章 Linux基础 2
	1.1 Linux文件系统概述 2
	1.2 Linux启动过程 4
	1.3 常用Linux 命令 6
	1.4 Shell脚本备忘 9
	1.5 Make脚本备忘 15
第2章 Java基础 26
	2.1 类装载器DexClassLoader 26
	2.2 JNI调用机制 32
	2.3 异步消息处理线程 37
第3章 Android源码下载及开发环境配置 44
	3.1 Mac系统的配置 44
	3.2 在Linux中配置USB连接 46
	3.3 在Eclipse中调试Framework 46
第4章 使用git 51
	4.1 安装git 52
	4.2 git仓库管理 52
	4.3 git merge用法 57
	4.4 git rebase用法 58
	4.5 git cherry-pick用法 61
	4.6 git reset用法 62
	4.7 恢复到无引用提交 63
	4.8 git remote用法 65
	4.9 git 配置 67
	4.10 同时使用git和svn 71
	4.11 其他git常用命令示例 72
第2部分 内核篇
第5章 Binder 78
	5.1 Binder框架 78
	5.2 设计Servier端 80
	5.3 Binder客户端设计 81
	5.4 使用Service类 82
	5.5 系统服务中的Binder对象 88
第6章 Framework概述 92
	6.1 Framework框架 92
	6.2 APK程序的运行过程 94
	6.3 客户端中的线程 94
	6.4 几个常见问题 95
第7章 理解Context 98
	7.1 Context是什么 98
	7.2 一个应用程序中包含多少个Context对象 99
	7.3 Context相关类的继承关系 99
	7.4 创建Context 100
第8章 创建窗口的过程 106
	8.1 窗口的类型 106
	8.2 token变量的含义 108
	8.3 创建应用窗口 111
	8.4 创建子窗口 121
	8.5 系统窗口Toast的创建 136
	8.6 创建窗口示例 139
第9章 Framework的启动过程 142
	9.1 Framework运行环境综述 142
	9.2 Dalvik虚拟机相关的可执行程序 143
	9.3 zygote的启动 147
	9.4 SystemServer进程的启动 155
第10章 AmS内部原理 160
	10.1 Activity调度机制 160
	10.2 内存管理 192
	10.3 对AmS中数据对象的理解 211
	10.4 ActivityGroup的内部机制 214
第11章 从输入设备中获取消息 221
	11.1 Android消息获取过程概述 221
	11.2 与消息处理相关的源码文件分布 223
	11.3 创建InputDispatcher线程 226
	11.4 把窗口信息传递给InputDispatcher线程 227
	11.5 创建InputChannel 229
	11.6 在WmS中注册InputChannel 232
	11.7 在客户进程中注册InputChannel 233
	11.8 WmS中处理消息的时机 234
	11.9 客户窗口获取消息的时机 235
第12章 屏幕绘图基础 237
	12.1 绘制屏幕的软件架构 237
	12.2 Java客户端绘制调用过程 239
	12.3 C客户端绘制过程 241
	12.4 Java客户端绘制相关类的关系 244
第13章 View工作原理 247
	13.1 导论 247
	13.2 用户消息类型 249
	13.3 按键消息派发过程 252
	13.4 按键消息在WmS中的派发过程 263
	13.5 触摸消息派发过程 266
	13.6 导致View树重新遍历的时机 274
	13.7 遍历View树performTraversals()的执行过程 293
	13.8 计算视图大小（measure）的过程 296
	13.9 布局（layout）过程 308
	13.10 绘制（draw）过程 313
	13.11 动画的绘制 331
第14章 WmS工作原理 340
	14.1 概述 340
	14.2 WmS主要内部类 348
	14.3 窗口的创建和删除 355
	14.4 计算窗口的大小 371
	14.5 切换窗口 379
	14.6 perforLayoutAndPlaceSurfacesLockedInner()的执行过程 398
	14.7 窗口动画 406
	14.8 屏幕旋转及Configuration的变化过程 409
第3部分 系统篇
第15章 资源访问机制 414
	15.1 定义资源 414
	15.2 存储资源 415
	15.3 styleable、style、attr、theme的意义 417
	15.4 AttributeSet与TypedArray类 420
	15.5 获取Resources的过程 425
	15.6 Framework资源 431
第16章 程序包管理（Package Manager Service） 439
	16.1 包管理概述 439
	16.2 packages.xml文件格式 442
	16.3 包管理服务的启动过程 446
	16.4 应用程序的安装和卸载 455
	16.5 intent匹配框架 463
第17章 输入法框架 467
	17.1 输入法框架组成概述 468
	17.2 输入法中各Binder对象的创建过程 469
	17.3 输入法主要操作过程 477
	17.4 输入法窗口内部的显示过程 490
	17.5 向编辑框传递字符 503
	17.6 输入法相关源码清单 504
第4部分 编译篇
第18章 Android编译系统 508
	18.1 Android源码文件结构 509
	18.2 从调用make命令开始说起 509
	18.3 编译所需脚本文件之间的协同关系 512
	18.4 如何增加一个product 523
	18.5 如何增加一个项目 528
	18.6 APK编译过程 533
	18.7 Framework的编译 544
	18.8 编译android.jar 547
	18.9 编译adt插件 553
	18.10 总结 554
第19章 编译自己的Rom 555
	19.1 嵌入式系统的内存地址空间 555
	19.2 各种映像（Image）文件的作用 559
	19.3 编译Nexus S（NS）的Image文件 562
	19.4 使用fastboot写入Image文件 566
	19.5 最后验证 567
第5部分 硬件驱动篇
第20章 基于TI OMAP处理器的 Techshine 开发板介绍 573
	20.1 Techv-35XX开发板概述 574
	20.2 交叉编译环境配置 575
	20.3 x-loader编译 578
	20.4 u-boot编译 578
	20.5 Techv-35XX Linux驱动和内核配置及编译 579
	20.6 Techv-35XX Android驱动编写 584
	20.7 Techv-35XX Android开发环境建立 589
	20.8 编译Android Donut 590
	20.9 Android根文件系统的制作 591
	20.10 相关Image文件的烧写 591
	20.11 Android 根文件系统安装 593